#include <vector>
#include <string>
#include <sstream>
#include <fstream>
#include <dirent.h>
#include <iostream>

int main(int argc, char *argv[]){
  // cmdline args
  char update = 0;
  if(argc > 2){
    std::cout << "[sd-make] ERROR : too many commandline-arguments given" << std::endl;
    std::cout << "          usage : make (major|minor|patch)" << std::endl;
    return 255;
  }
  if(argc == 2){
    if(std::string(argv[1]) == "major") update = 'M';
    else if(std::string(argv[1]) == "minor") update = 'm';
    else if(std::string(argv[1]) == "patch") update = 'p';
    else{
      std::cout << "[sd-make] ERROR : unknown version selector given" << std::endl;
      std::cout << "          usage : make (major|minor|patch)" << std::endl;
      return 255;
    }
  }

  // load version
  unsigned int version[4] = {0}; // major, minor, patch, build.
  std::string version_text = ""; // M.m.p+b
  std::stringstream ss;
  auto ifs = std::ifstream("./version.txt");
  for(int i = 0; i < 4; i++){
    ifs >> version[i];
    ifs.ignore();
  }
  ifs.close();

  // build version update
  version[3]++;
  switch(update){
    case 'M':
    version[0]++;
    version[1] = 0;
    version[2] = 0;
    version[3] = 0;
    break;
    case 'm':
    version[1]++;
    version[2] = 0;
    version[3] = 0;
    break;
    case 'p':
    version[2]++;
    version[3] = 0;
    break;
  }
  ss << version[0] << "." << version[1] << "." << version[2] << "+" << version[3];
  version_text = ss.str();
  std::cout << "version: " << version_text << std::endl;

  // version feedback
  auto ofs = std::ofstream("./version.txt");
  ofs << version_text;
  ofs.close();

  // get file list
  std::vector<std::string> modules;
  DIR *dp = opendir("./src/");
  if(dp == nullptr) return 255;
  dirent *entry = readdir(dp);
  while(entry != nullptr){
    if(std::string(entry->d_name) == "." || std::string(entry->d_name) == ".."){
      std::cout << "[sd-make] skip " << std::string(entry->d_name) << std::endl;
      entry = readdir(dp);
      continue;
    }
    modules.push_back(std::string(entry->d_name));
    std::cout << "./src/" << entry->d_name << std::endl;
    entry = readdir(dp);
  }

  // ----- main-src ----- //
  std::string tmp, mainSource = "// ----- main.js ----- //\n"
  "// automatic generated by sd-make.exe made by laum-riddle\n";
  // add namespace
  mainSource += '\n';
  ifs = std::ifstream("./main-src/ns.mjs");
  while(std::getline(ifs, tmp)) mainSource += tmp + '\n';
  ifs.close();
  // add version
  mainSource += "\n// constant\n";
  mainSource += "savedojin.version = '" + version_text + "'\n";
  // add main
  mainSource += '\n';
  ifs = std::ifstream("./main-src/main.mjs");
  while(std::getline(ifs, tmp)) mainSource += tmp + '\n';
  ifs.close();
  // add deploy
  mainSource += '\n';
  ifs = std::ifstream("./main-src/deploy.mjs");
  while(std::getline(ifs, tmp)) mainSource += tmp + '\n';
  ifs.close();
  // add modules
  mainSource += "\n"
  "savedojin.modules = {";
  auto itrPath = modules.begin();
  do{
    ifs = std::ifstream("./src/" + *itrPath);
    int flag = 0;
    std::size_t index;
    bool getFlag = false;
    std::string url = "";
    while(std::getline(ifs, tmp)){
      switch(flag){
        case 0:
          for(index = 0, getFlag = false; index < tmp.length(); index++){
            if(tmp[index] == '['){
              getFlag = true;
              continue;
            }
            if(tmp[index] == ']') break;
            if(getFlag) url += tmp[index];
          }
          std::cout << url << std::endl;
          flag++;
        break;
        case 1:
          for(index = 0; index < tmp.length(); index++) if(tmp[index] == '{' || tmp[index] == 'c'); // class{ or {
          tmp = "'" + url + "': " + tmp.substr(index - 1);
          flag++;
        case 2:
          mainSource += "\n  " + tmp;
        break;
      }
    }
    mainSource += ',';
    ifs.close();
    itrPath++;
  } while(itrPath != modules.end());
  mainSource += "\n"
  "};\n\n"
  "// ----- when clicked ----- //\n"
  "savedojin.main()\n";

  // write main.js
  ofs = std::ofstream("./main.mjs");
  ofs << mainSource;
  ofs.close();
  
  return 0;
}
